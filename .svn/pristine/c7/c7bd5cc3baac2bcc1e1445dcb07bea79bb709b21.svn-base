using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading;
using Android.App;
using Android.Bluetooth;
using Android.Content;
using Android.OS;
using Android.Runtime;
using Android.Views;
using Android.Widget;
using Java.Util;

namespace controller
{
    class GattServices : BluetoothGattCallback
    {
        private BluetoothGatt gattBot;
        private BluetoothGattService serialService;
        private BluetoothGattCharacteristic writeCharacteristic;

        private static UUID SERIAL_UUID = UUID.FromString("0000fff0-0000-1000-8000-00805f9b34fb");
        private static UUID TX_UUID = UUID.FromString("0000fff2-0000-1000-8000-00805f9b34fb");
        private static int CHANNEL_PACKET_SIZE = 18;
        public static short[] controllerData = new short[8];
        public byte[] writeBuffer = new byte[CHANNEL_PACKET_SIZE];
        ControllerActivity test;
        public GattServices()
        {
            gattBot = null;
            serialService = null;
            writeCharacteristic = null;
        }

        public GattServices(ControllerActivity a)
        {
            gattBot = null;
            serialService = null;
            writeCharacteristic = null;
            this.test = a;
        }

        public void ConnectGatt(BluetoothDevice device)
        { 
            if (device != null)
            {
                if (gattBot != null)
                {
                    gattBot.Connect();
                }
                else
                {
                    gattBot = device.ConnectGatt(Application.Context, false, this);
                }
            }
        }

        private void makeChannelPacket(byte[] buffer)
        {
            //controller.GetChannelData(buffer);
            // should be add buffer[0], buffer[17]
            Console.WriteLine("Channel data {0}.{1}.{2}.{3}.{4}.{5}.{6}.{7}", controllerData[0], controllerData[1], controllerData[2], controllerData[3], controllerData[4], controllerData[5], controllerData[6], controllerData[7]);
            Buffer.BlockCopy(buffer, 1, controllerData, 0, 16);
            buffer[0] = 0x40; //@
            buffer[17] = 0x0D; //CR
            
        }

        public void WriteGatt()
        {
            while (true)
            {
                if (ControllerActivity.STATE) { 
                    Thread.Sleep(50);
                    //make channel data for writing
                    makeChannelPacket(writeBuffer);
                    writeCharacteristic.SetValue(writeBuffer);
                    gattBot.WriteCharacteristic(writeCharacteristic);
                }
            }
        }

        public override void OnConnectionStateChange(BluetoothGatt gatt, GattStatus status, ProfileState newState)
        {
            base.OnConnectionStateChange(gatt, status, newState);

            switch (newState)
            {
                case ProfileState.Disconnected:
                    Console.WriteLine("disconnected");
                    break;
                case ProfileState.Connecting:
                    Console.WriteLine("Connecting");
                    break;
                case ProfileState.Connected:
                    Console.WriteLine("Connected");
                    Thread.Sleep(200);
                    gatt.DiscoverServices();
                    break;
                case ProfileState.Disconnecting:
                    Console.WriteLine("Disconnecting");
                    break;
            }
        }

        public override void OnServicesDiscovered(BluetoothGatt gatt, GattStatus status)
        {
            base.OnServicesDiscovered(gatt, status);
            Console.WriteLine("OnServicesDiscovered: " + status.ToString());
            //Ready to Write Something!
            serialService = gattBot.GetService(SERIAL_UUID);
            writeCharacteristic = serialService.GetCharacteristic(TX_UUID);
            //Start Write Thread
            if (serialService != null && writeCharacteristic != null)
            {
                Thread _writegatt = new Thread(WriteGatt);
                _writegatt.IsBackground = true;
                _writegatt.Start();
            }
        }

        public override void OnCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, [GeneratedEnum] GattStatus status)
        {
            base.OnCharacteristicWrite(gatt, characteristic, status);
        }
    }
}