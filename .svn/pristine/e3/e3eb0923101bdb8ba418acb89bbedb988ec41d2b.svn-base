using Android.App;
using Android.Widget;
using Android.OS;
using Android.Views;
using Android.Runtime;
using Android.Content.PM;
using System.Threading;
using System;
using Android.Content;

namespace controller
{
    [Activity(Label = "Virtual Controller Stick", ScreenOrientation = ScreenOrientation.Landscape, Theme = "@android:style/Theme.NoTitleBar.Fullscreen",
         ConfigurationChanges = ConfigChanges.Orientation | ConfigChanges.KeyboardHidden | ConfigChanges.ScreenSize)]
    public class VirtualActivity : Activity
    {

        private const short ARM_ON   = 1900;
        private const short ARM_OFF  = 1000;
        private const short FLIGHT_MODE_ANGLE   = 1000;
        private const short FLIGHT_MODE_ALTHOLD = 1900;
        private const int   INPUT_MIN = -1;
        private const int   INPUT_MAX = 1;
        private const int   OUTPUT_MIN = 1000;
        private const int   OUTPUT_MAX = 2000;
        private int stickNum;
        private int flightNum;

        //Controller data : T, A, E, R, Aux1, Aux2, Aux3, Aux4
        public static short[] controllerData = new short[8];

        private RelativeLayout layoutJoystick1, layoutJoystick2;
        private ToggleButton armButton;
        private TextView textView1, textView2, textView3, textView4, textView5, textView6, textView7, textView8, textView9, textView10, textView11;
        private Switch modeSwitch, flightSwitch;
        private Spinner stickModeSpinner, flightModeSpinner;

        VirtualController js1, js2;

        protected override void OnCreate(Bundle savedInstanceState)
        {
            base.OnCreate(savedInstanceState);
            SetContentView(Resource.Layout.VirtualController);

            ISharedPreferences pref = GetSharedPreferences("pref", FileCreationMode.Private);
            stickNum = pref.GetInt("stick_mode", 0);  //(Key, Defualt Value)
            flightNum = pref.GetInt("flight_mode", 0);//(Key, Defualt Value)

            for (int i = 0; i < controllerData.Length; i++)
                controllerData[i] = 0;

            textView1 = this.FindViewById<TextView>(Resource.Id.textView1);
            textView2 = this.FindViewById<TextView>(Resource.Id.textView2);
            textView3 = this.FindViewById<TextView>(Resource.Id.textView3);
            textView4 = this.FindViewById<TextView>(Resource.Id.textView4);
            textView5 = this.FindViewById<TextView>(Resource.Id.textView5);
            textView6 = this.FindViewById<TextView>(Resource.Id.textView6);
            textView7 = this.FindViewById<TextView>(Resource.Id.textView7);
            textView8 = this.FindViewById<TextView>(Resource.Id.textView8);
            textView9 = this.FindViewById<TextView>(Resource.Id.textView9);
            textView10 = this.FindViewById<TextView>(Resource.Id.textView10);
            textView11 = this.FindViewById<TextView>(Resource.Id.textView11);

            layoutJoystick1 = this.FindViewById<RelativeLayout>(Resource.Id.layout_joystick1);
            layoutJoystick2 = this.FindViewById<RelativeLayout>(Resource.Id.layout_joystick2);

            armButton = this.FindViewById<ToggleButton>(Resource.Id.armButton);
            modeSwitch = this.FindViewById<Switch>(Resource.Id.modeSwitch);
            flightSwitch = this.FindViewById<Switch>(Resource.Id.flightSwitch);
            stickModeSpinner = this.FindViewById<Spinner>(Resource.Id.spinnerStickMode);
            flightModeSpinner = this.FindViewById<Spinner>(Resource.Id.spinnerFlightMode);


            //textView1.Visibility = ViewStates.Gone;
            textView2.Visibility = ViewStates.Gone;
            textView3.Visibility = ViewStates.Gone;
            textView4.Visibility = ViewStates.Gone;
            textView5.Visibility = ViewStates.Gone;
            textView6.Visibility = ViewStates.Gone;
            textView7.Visibility = ViewStates.Gone;
            textView8.Visibility = ViewStates.Gone;
            textView9.Visibility = ViewStates.Gone;
            textView10.Visibility = ViewStates.Gone;
            
            stickModeSpinner.ItemSelected += new EventHandler<AdapterView.ItemSelectedEventArgs> (Spinner_ItemSelected);
            var adapter1 = ArrayAdapter.CreateFromResource(
                this, Resource.Array.stick_array, Android.Resource.Layout.SimpleSpinnerItem);

            adapter1.SetDropDownViewResource(Android.Resource.Layout.SimpleSpinnerDropDownItem);
            stickModeSpinner.Adapter = adapter1;

            flightModeSpinner.ItemSelected += new EventHandler<AdapterView.ItemSelectedEventArgs>(Spinner_ItemSelected);
            var adapter2 = ArrayAdapter.CreateFromResource(
                this, Resource.Array.flight_array, Android.Resource.Layout.SimpleSpinnerItem);

            adapter2.SetDropDownViewResource(Android.Resource.Layout.SimpleSpinnerDropDownItem);
            flightModeSpinner.Adapter = adapter2;

            stickModeSpinner.SetSelection(stickNum);
            flightModeSpinner.SetSelection(flightNum);
            textView1.Text = stickNum.ToString() + "   ^" + flightNum.ToString();

            js1 = new VirtualController(ApplicationContext, layoutJoystick1, Resource.Drawable.image_button);
            js1.SetStickSize(100, 100);
            js1.SetLayoutSize(500, 500);
            js1.LayoutAlpha = 300;
            js1.StickAlpha = 100;
            js1.Offset = 90;
            js1.MinimumDistance = 50;

            js2 = new VirtualController(ApplicationContext, layoutJoystick2, Resource.Drawable.image_button);
            js2.SetStickSize(100, 100);
            js2.SetLayoutSize(500, 500);
            js2.LayoutAlpha = 150;
            js2.StickAlpha = 100;
            js2.Offset = 90;
            js2.MinimumDistance = 50;

            layoutJoystick1.SetOnTouchListener(new OnTouchListenerAnonymousInnerClass(this, js1, 1)); //= new OnTouchListenerAnonymousInnerClass(this);
                                                                                                      //layoutJoystick.Touch += LayoutJoystick_Touch;
            layoutJoystick2.SetOnTouchListener(new OnTouchListenerAnonymousInnerClass(this, js2, 2));

            armButton.Click += ArmButton_Click;
            StartActivity();
        }

        protected override void OnStop()
        {
            base.OnStop();
            ISharedPreferences pref = GetSharedPreferences("pref", FileCreationMode.Private);
            ISharedPreferencesEditor editor = pref.Edit();

            //Spinner stick = this.FindViewById<Spinner>(Resource.Id.spinnerStickMode);
            //Spinner flight = this.FindViewById<Spinner>(Resource.Id.spinnerFlightMode);

            editor.PutInt("stick_mode", (int)stickModeSpinner.SelectedItemId);
            editor.PutInt("flight_mode", (int)flightModeSpinner.SelectedItemId);

            editor.Commit();
        }

        private void Spinner_ItemSelected(object sender, AdapterView.ItemSelectedEventArgs e)
        {
            Spinner spinner = (Spinner)sender;
            string toast = string.Format("SELECT: {0}", spinner.GetItemAtPosition(e.Position));
            Toast.MakeText(this, toast, ToastLength.Long).Show();
            //textView11.Text = spinner.GetItemAtPosition(e.Position).ToString() + "  " + flightModeSpinner.SelectedItem.ToString();
        }

        public void StartActivity()
        {
            ThreadPool.QueueUserWorkItem(delegate (object state)
            {
                RunOnUiThread(() => {
                    GetStickData();
                    textView11.Text = "\n" + controllerData[0].ToString() + controllerData[1].ToString() + controllerData[2].ToString() + controllerData[3].ToString();             
                });
            }
            , null);
        }
        
        private void GetStickData()
        {
            if (armButton.Checked)
            {
                if (stickModeSpinner.SelectedItemId == 0)
                {//Stick Mode 1
                    controllerData[0] = (short)ConversionStickData(-js2.Y, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);   //T
                    controllerData[1] = (short)ConversionStickData(js2.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //A
                    controllerData[2] = (short)ConversionStickData(js1.Y, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //E
                    controllerData[3] = (short)ConversionStickData(-js1.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);   //R
                }
                else if (stickModeSpinner.SelectedItemId == 1)
                {//Stick Mode 2
                    controllerData[0] = (short)ConversionStickData(-js1.Y, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);   //T
                    controllerData[1] = (short)ConversionStickData(js2.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //A
                    controllerData[2] = (short)ConversionStickData(js2.Y, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //E
                    controllerData[3] = (short)ConversionStickData(-js1.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);   //R
                }
            }
            else
            {
                for (int i = 0; i < controllerData.Length; i++)
                    controllerData[i] = 1000;
            }
        }

        private void ArmButton_Click(object sender, System.EventArgs e)
        {
            if (armButton.Checked)
            {
                controllerData[4] = ARM_ON;

                ISharedPreferences pref = GetSharedPreferences("pref", FileCreationMode.Private);
                ISharedPreferencesEditor editor = pref.Edit();

                editor.PutInt("stick_mode", (int)stickModeSpinner.SelectedItemId);
                editor.PutInt("flight_mode", (int)flightModeSpinner.SelectedItemId);

                editor.Commit();

                if (flightModeSpinner.SelectedItem.ToString() == "ANGLE MODE")
                {
                    controllerData[0] = 1000;
                    controllerData[1] = 1500;
                    controllerData[2] = 1500;
                    controllerData[3] = 1500;
                    controllerData[5] = FLIGHT_MODE_ANGLE;

                    if (stickModeSpinner.SelectedItemId == 0)
                    { //Stick Mode 1

                        js1.DrawPosition(250, 250);
                        js2.DrawPosition(250, 400);
                    }
                    else if (stickModeSpinner.SelectedItemId == 1)
                    { //Stick Mode 2
                        js1.DrawPosition(250, 400);
                        js2.DrawPosition(250, 250);
                    } 
                }
                else if(flightModeSpinner.SelectedItem.ToString() == "ALT HOLD MODE")
                {
                    controllerData[0] = 1500;
                    controllerData[1] = 1500;
                    controllerData[2] = 1500;
                    controllerData[3] = 1500;
                    controllerData[5] = FLIGHT_MODE_ALTHOLD;
                    js1.DrawPosition(250, 250);
                    js2.DrawPosition(250, 250);
                }
                else if (flightModeSpinner.SelectedItem.ToString() == "POSISTION HOLD MODE")
                {
                    controllerData[0] = 1500;
                    controllerData[1] = 1500;
                    controllerData[2] = 1500;
                    controllerData[3] = 1500;
                    controllerData[5] = FLIGHT_MODE_ALTHOLD;
                    js1.DrawPosition(250, 250);
                    js2.DrawPosition(250, 250);
                }

                modeSwitch.Visibility = ViewStates.Invisible;
                flightSwitch.Visibility = ViewStates.Invisible;
            }
            else
            {
                controllerData[4] = ARM_OFF;
                modeSwitch.Visibility = ViewStates.Visible;
                flightSwitch.Visibility = ViewStates.Visible;

                js1.Remove();
                js2.Remove();  
            }

            textView11.Text = "T: " + controllerData[0].ToString() + "A: " + controllerData[1].ToString() + "E: " + controllerData[2].ToString() + "R: " + controllerData[3].ToString();
        }

        public static double ConversionStickData(double input, int inputMin, int inputMax, int outputMin, int outputMax)
        {

            double inputData = ConstrainMinMax(input, inputMin, inputMax);

            double value = (inputData - inputMin) * (outputMax - outputMin) / (inputMax - inputMin) + outputMin;

            return ConstrainMinMax(value, outputMin, outputMax);
        }

        public static double ConstrainMinMax(double input, int min, int max)
        {
            return ((input > max) ? max : (input < min) ? min : input);
        }



        private class OnTouchListenerAnonymousInnerClass : Java.Lang.Object, Android.Views.View.IOnTouchListener
        {
            private readonly VirtualActivity outerInstance;
            private readonly VirtualController js;
            private readonly int JoystickNumber;
            private TextView text1, text2;

            private short X, Y;

            public OnTouchListenerAnonymousInnerClass(VirtualActivity outerInstance, VirtualController js, int number)
            {
                this.outerInstance = outerInstance;
                this.js = js;
                this.JoystickNumber = number;
                text1 = outerInstance.textView11;
            }

            public bool OnTouch(View v, MotionEvent e)
            {
                if(controllerData[4] == ARM_ON)
                {
                    js.DrawStick(e);
                    //text2 = outerInstance.textView1;
                    //text2.Text = js.Distance.ToString();
                    if (e.Action == MotionEventActions.Down || e.Action == MotionEventActions.Move)
                    {
                        //X = (short)ConversionStickData(js.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);
                        //Y = (short)ConversionStickData(-js.Y, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);
                        if ( outerInstance.stickModeSpinner.SelectedItemId == 0 )
                        {//Stick Mode 1
                            if (JoystickNumber == 1)
                            {
                                controllerData[2] = (short)ConversionStickData(js.Y, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //E
                                controllerData[3] = (short)ConversionStickData(-js.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);   //R
                            }
                            else if (JoystickNumber == 2)
                            {
                                controllerData[0] = (short)ConversionStickData(-js.Y, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);   //T
                                controllerData[1] = (short)ConversionStickData(js.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //A
                            }
                        }
                        else if ( outerInstance.stickModeSpinner.SelectedItemId == 1)
                        {//Stick Mode 2
                            if (JoystickNumber == 1)
                            {
                                controllerData[0] = (short)ConversionStickData(-js.Y, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);   //T
                                controllerData[3] = (short)ConversionStickData(-js.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);   //R
                            }
                            else if (JoystickNumber == 2)
                            {
                                controllerData[1] = (short)ConversionStickData(js.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //A
                                controllerData[2] = (short)ConversionStickData(js.Y, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //E
                            }    
                        }
                        text1.Text = "T: " + controllerData[0].ToString() + "A: " + controllerData[1].ToString() + "E: " + controllerData[2].ToString() + "R: " + controllerData[3].ToString();
                        //text2.Text = "Y : " + Y.ToString() + " " + e.GetY();
                    }
                    else if (e.Action == MotionEventActions.Up)
                    {
                        float throttle;
                        if (outerInstance.modeSwitch.Checked)
                        {//Stick Mode 1
                            if (JoystickNumber == 1)
                            {
                                js.DrawPosition(250, 250);
                                controllerData[2] = (short)ConversionStickData(js.Y, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //E
                                controllerData[3] = (short)ConversionStickData(-js.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);   //R
                            }
                            else if (JoystickNumber == 2)
                            {
                                throttle = (float)VirtualActivity.ConstrainMinMax(e.GetY(), 100, 400);
                                js.DrawPosition(250, throttle);
                                controllerData[0] = (short)ConversionStickData(-throttle, -400, -100, OUTPUT_MIN, OUTPUT_MAX);   //T
                                controllerData[1] = (short)ConversionStickData(js.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //A
                            }
                        }
                        else
                        {//Stick Mode 2
                            if (JoystickNumber == 1)
                            {
                                throttle = (float)VirtualActivity.ConstrainMinMax(e.GetY(), 100, 400);
                                js.DrawPosition(250, throttle);
                                controllerData[0] = (short)ConversionStickData(-throttle, -400, -100, OUTPUT_MIN, OUTPUT_MAX);   //T
                                controllerData[3] = (short)ConversionStickData(-js.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);   //R
                            }
                            else if (JoystickNumber == 2)
                            {
                                js.DrawPosition(250, 250);
                                controllerData[1] = (short)ConversionStickData(js.X, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //A
                                controllerData[2] = (short)ConversionStickData(js.Y, INPUT_MIN, INPUT_MAX, OUTPUT_MIN, OUTPUT_MAX);    //E
                            }
                        }
                        text1.Text = "T: " + controllerData[0].ToString() + "A: " + controllerData[1].ToString() + "E: " + controllerData[2].ToString() + "R: " + controllerData[3].ToString();
                        //text2.Text = "Y : " + Y.ToString() + " " + e.GetY();

                    }
                }
                else
                {

                }
                return true;
            }
        }

        private void LayoutJoystick_Touch(object sender, View.TouchEventArgs e)
        {
            throw new System.NotImplementedException();
        }

        public override bool OnGenericMotionEvent(MotionEvent e)
        {
            return base.OnGenericMotionEvent(e);
        }

        public override bool OnKeyDown([GeneratedEnum] Keycode keyCode, KeyEvent e)
        {
            return base.OnKeyDown(keyCode, e);
        }

        public override bool OnKeyUp([GeneratedEnum] Keycode keyCode, KeyEvent e)
        {
            return base.OnKeyUp(keyCode, e);
        }

        public override bool OnKeyLongPress([GeneratedEnum] Keycode keyCode, KeyEvent e)
        {
            return base.OnKeyLongPress(keyCode, e);
        }

        public override bool OnKeyMultiple([GeneratedEnum] Keycode keyCode, int repeatCount, KeyEvent e)
        {
            return base.OnKeyMultiple(keyCode, repeatCount, e);
        }

        public override bool OnKeyShortcut([GeneratedEnum] Keycode keyCode, KeyEvent e)
        {
            return base.OnKeyShortcut(keyCode, e);
        }
    }
}


